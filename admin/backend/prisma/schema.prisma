// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// チャットスレッドモデル
model Thread {
  id          Int       @id @default(autoincrement())
  title       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // リレーション
  messages   Message[]
  summaries  Summary[]
  slides     Slide[]
  articles   Article[]

  @@map("threads")
}

// チャットメッセージモデル
model Message {
  id        Int      @id @default(autoincrement())
  content   String
  role      String   // "user" | "assistant"
  threadId  Int
  createdAt DateTime @default(now())

  // リレーション
  thread    Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// 要約モデル
model Summary {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  threadId    Int
  status      String   @default("pending") // "pending" | "approved" | "saved"
  notionUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  thread     Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("summaries")
}

// スライドモデル
model Slide {
  id          Int      @id @default(autoincrement())
  title       String
  content     String   @db.Text  // Marp Markdown
  threadId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  thread      Thread?  @relation(fields: [threadId], references: [id], onDelete: SetNull)

  @@map("slides")
}

// 記事モデル
model Article {
  id          Int      @id @default(autoincrement())
  title       String
  content     String   @db.Text
  status      String   @default("draft") // "draft" | "published"
  qiitaUrl    String?
  threadId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  thread      Thread?  @relation(fields: [threadId], references: [id], onDelete: SetNull)

  @@map("articles")
}
